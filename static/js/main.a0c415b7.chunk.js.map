{"version":3,"sources":["images/greenLED.png","images/ezgif-3-5a8433053891.gif","messageBox.js","winnersBox.js","App.js","index.js"],"names":["MessageBox","boxStyle","padding","className","id","this","props","waveListArray","map","wave","index","style","address","timestamp","toString","message","React","Component","defaultProps","WinnersBox","winnersList","winner","App","useState","currentAccount","setCurrentAccount","totalWaves","setTotalWaves","allWaves","setAllWaves","progressTextArray","setProgressTextArray","shouldShowGif","setShouldShowGif","ethScanURL","setEthScanURL","messageBoxText","setMessageBoxText","setWinnersList","contractAddress","contractABI","abi","checkIfWalletIsConnected","a","window","ethereum","console","log","retrieveWaveCount","request","method","accounts","length","account","provider","ethers","providers","Web3Provider","getSigner","wavePortalContract","Contract","getTotalWaves","count","toNumber","getAllWinners","getWinners","winners","getAllWaves","waves","wavesCleaned","forEach","push","waver","Date","on","from","newWave","prevState","filter","v","i","findIndex","t","JSON","stringify","connectWallet","alert","signer","gasLimit","waveTxn","hash","oldArray","wait","prev","toLowerCase","useEffect","src","greenLED","slice","type","value","onChange","event","target","onClick","str","href","rel","progressGif","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a0c415b7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/greenLED.b8867b90.png\";","export default __webpack_public_path__ + \"static/media/ezgif-3-5a8433053891.e5f26fbf.gif\";","import React from \"react\";\nimport \"./App.css\";\n\nexport class MessageBox extends React.Component {\n  render() {\n    const boxStyle = {\n      padding: \"10px\",\n    };\n\n    return (\n      <div className=\"messageBox\" id=\"msgBoxScrollBar\">\n        {this.props.waveListArray.map((wave, index) => {\n          return (\n            <div key={index} style={boxStyle}>\n              <div>Address: {wave.address}</div>\n              <div>Time: {wave.timestamp.toString()}</div>\n              <div>Message: {wave.message}</div>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nMessageBox.defaultProps = {\n  waveListArray: [\n    {\n      address: \"test\",\n      timestamp: \"Test date\",\n      message: \"test message\",\n    },\n    {\n      address: \"test\",\n      timestamp: \"Test date\",\n      message: \"test message\",\n    },\n    {\n      address: \"test\",\n      timestamp: \"Test date\",\n      message: \"test message\",\n    },\n    {\n      address: \"test\",\n      timestamp: \"Test date\",\n      message: \"test message\",\n    },\n    {\n      address: \"test\",\n      timestamp: \"Test date\",\n      message: \"test message\",\n    },\n  ],\n};\n","import React from \"react\";\nimport \"./App.css\";\n\nexport class WinnersBox extends React.Component {\n  render() {\n    const boxStyle = {\n      padding: \"10px\",\n    };\n\n    return (\n      <div className=\"winnersBox\" id=\"msgBoxScrollBar\">\n        Winners:\n        {this.props.winnersList.map((winner, index) => {\n          return (\n            <div key={index} style={boxStyle}>\n              <div>{winner}</div>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nWinnersBox.defaultProps = {\n  winnersList: [],\n};\n","import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport \"./App.css\";\nimport abi from \"./utils/WavePortal.json\";\nimport greenLED from \"./images/greenLED.png\";\nimport progressGif from \"./images/ezgif-3-5a8433053891.gif\";\nimport { MessageBox } from \"./messageBox.js\";\nimport { WinnersBox } from \"./winnersBox\";\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [totalWaves, setTotalWaves] = useState(0);\n  const [allWaves, setAllWaves] = useState([]);\n  const [progressTextArray, setProgressTextArray] = useState([]);\n  const [shouldShowGif, setShouldShowGif] = useState(false);\n  const [ethScanURL, setEthScanURL] = useState(\"\");\n  const [messageBoxText, setMessageBoxText] = useState(\"enter a message here\");\n  const [winnersList, setWinnersList] = useState([]);\n\n  //const contractAddress = \"0x324959544492243926B052c800939F7b408eef31\"; //Local ganache\n  const contractAddress = \"0x5B4803f3A52792cF6333aB29d69E6F0740aD7811\"; //rinkeby\n\n  const contractABI = abi.abi;\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n\n        retrieveWaveCount();\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const retrieveWaveCount = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n\n        /*\n         * You're using contractABI here\n         */\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          provider\n        );\n\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n        setTotalWaves(count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getAllWinners = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n\n        /*\n         * You're using contractABI here\n         */\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          provider\n        );\n\n        let winners = await wavePortalContract.getWinners();\n        console.log(\"Retrieved Winners\", winners);\n        setWinnersList(winners);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getAllWaves = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        setAllWaves([]);\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          provider\n        );\n\n        /*\n         * Call the getAllWaves method from your Smart Contract\n         */\n        const waves = await wavePortalContract.getAllWaves();\n\n        /*\n         * We only need address, timestamp, and message in our UI so let's\n         * pick those out\n         */\n        let wavesCleaned = [];\n        waves.forEach((wave) => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message,\n          });\n        });\n\n        /*\n         * Store our data in React State\n         */\n        setAllWaves(wavesCleaned);\n\n        wavePortalContract.on(\"NewWave\", (from, timestamp, message) => {\n          console.log(\"NewWave\", from, timestamp, message);\n\n          const newWave = {\n            address: from,\n            timestamp: new Date(timestamp * 1000),\n            message: message,\n          };\n\n          setAllWaves((prevState) => [...prevState, newWave]);\n          setAllWaves((prevState) =>\n            prevState.filter(\n              (v, i, a) =>\n                a.findIndex((t) => JSON.stringify(t) === JSON.stringify(v)) ===\n                i\n            )\n          );\n\n          retrieveWaveCount();\n          console.log(\"all waves\", allWaves);\n        });\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  /**\n   * Implement your connectWallet method here\n   */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        setProgressTextArray([]);\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n\n        /*\n         * Execute the actual wave from your smart contract\n         */\n        const waveTxn = await wavePortalContract.wave(messageBoxText, {\n          gasLimit: 300000,\n        });\n        console.log(\"Mining...\", waveTxn.hash);\n        setProgressTextArray((oldArray) => [...oldArray, \"Mining...\"]);\n        setShouldShowGif(true);\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n        setEthScanURL(\"https://rinkeby.etherscan.io/tx/\" + waveTxn.hash);\n        setProgressTextArray((oldArray) => [...oldArray, \"Mined!\"]);\n        console.log(progressTextArray);\n        retrieveWaveCount(); //Update wave count after mining\n\n        wavePortalContract.on(\"NewWinner\", (from, message) => {\n          setWinnersList((prev) => [...prev, from]);\n          console.log(\n            \"NewWinner\",\n            from,\n            message,\n            \"current account\",\n            currentAccount\n          );\n          if (currentAccount.toLowerCase === from.toLowerCase) {\n            alert(\"Whoohoo!! You won 0.0001 eth!\");\n          }\n        });\n        //getAllWaves();\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleChange = (event) => {\n    setMessageBoxText(event.target.value);\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    getAllWaves();\n    getAllWinners();\n  }, []);\n\n  return (\n    <div className=\"mainContainer\">\n      {\n        //Only render the indicator if account is connected.\n        currentAccount && (\n          <div className=\"connectedIndicator\">\n            <img src={greenLED} className=\"greenLED\" />\n            Connected to address ...{currentAccount.slice(-4)}\n          </div>\n        )\n      }\n\n      <div className=\"dataContainer\">\n        <MessageBox className=\"messageBox\" waveListArray={allWaves} />\n        <WinnersBox className=\"messaeBox\" winnersList={winnersList} />\n        <div className=\"waveCount\">\n          <h1>Total waves receieved: {totalWaves}</h1>\n        </div>\n        <div className=\"header\">\n          Welcome to the <span>(vapor) </span>\n          <div className=\"wavePortalText\">WAVE PORTAL</div>\n        </div>\n\n        <div className=\"bio\">\n          Welcome to the (vapor) wave portal. The most ａｅｓｔｈｅｔｉｃ way to\n          send messages over the blockchain! Each message gives the winner a 50%\n          chance of winning 0.0001 eth!\n        </div>\n        <div className=\"center\">\n          <input\n            className=\"inputBox\"\n            type=\"text\"\n            value={messageBoxText}\n            onChange={handleChange}\n          />\n          <button className=\"waveButton\" onClick={wave}>\n            Wave at Me\n          </button>\n        </div>\n        {/*\n         * If there is no currentAccount render this button\n         */}\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n        <div className=\"progressText\">\n          <ul>\n            {progressTextArray.map((str) => (\n              <li>{str}</li>\n            ))}\n          </ul>\n        </div>\n        {ethScanURL && (\n          <div className=\"ethScanURLText\">\n            See this transaction on{\" \"}\n            <a href={ethScanURL} target=\"_blank\" rel=\"noopener noreferrer\">\n              ethscan\n            </a>\n          </div>\n        )}\n\n        {shouldShowGif && (\n          <div className=\"progressGif\">\n            <img src={progressGif} />\n          </div>\n        )}\n        <div className=\"aboutSection\">\n          Deployed to the Rinkeby network at\n          <a\n            href=\"https://rinkeby.etherscan.io/address/0x5B4803f3A52792cF6333aB29d69E6F0740aD7811\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            0x5B4803f3A52792cF6333aB29d69E6F0740aD7811\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}